pipeline {
  agent any

  environment {
    AWS_REGION = 'us-east-1'
    ECR_REPO = 'nginx-app'
    ACCOUNT_ID = '123456789101'
    ECR_REGISTRY = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    IMAGE_TAG = "${env.BUILD_NUMBER}"
    KUBECONFIG = credentials('kubeconfig')
    DEPLOYMENT_NAME = 'nnginx-headless'
    SERVICE_NAME = 'nginx-headless'
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Login to ECR') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']]) {
          sh '''
            aws sts get-caller-identity
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          '''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        sh """
          docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG .
        """
      }
    }

    stage('Scan with Trivy') {
      steps {
        sh """
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --exit-code 1 --severity CRITICAL,HIGH $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
        """
      }
    }

    stage('Push to ECR') {
      steps {
        sh """
          docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
        """
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        script {
          sh """
            mkdir -p ~/.kube
            echo "$KUBECONFIG" > ~/.kube/config
            chmod 600 ~/.kube/config

            sed "s|IMAGE_PLACEHOLDER|$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG|g" k8s/deployment.yaml | kubectl apply -f -
            kubectl apply -f k8s/service.yaml
          """
        }
      }
    }

    stage('Sanity Check') {
      steps {
        script {
          echo "üîç Running post-deployment checks..."

          sh """
            echo "‚è≥ Waiting for Pods to be ready..."
            kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=60s

            echo "üìã Checking Pod status..."
            kubectl get pods -l app=$DEPLOYMENT_NAME

            echo "üß™ Running basic HTTP check via port-forward..."
            POD_NAME=$(kubectl get pods -l app=$DEPLOYMENT_NAME -o jsonpath="{.items[0].metadata.name}")
            kubectl port-forward $POD_NAME 8080:80 &

            sleep 5
            curl --fail http://localhost:8080 || (echo "Sanity check failed!" && exit 1)
            kill %1
          """
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Build, scan, deployment and sanity check passed!"
    }
    failure {
      echo "‚ùå Pipeline failed. Check logs for details."
    }
  }
}